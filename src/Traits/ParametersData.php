<?php
/**
 * Created by PhpStorm.
 * User: joro
 * Date: 15.5.2017 г.
 * Time: 17:21 ч.
 */

namespace Omniship\Traits;

use Carbon\Carbon;
use Omniship\Common\Address;
use Omniship\Common\ItemBag;
use Omniship\Common\Parameter;
use Omniship\Common\ShippingService;
use Symfony\Component\HttpFoundation\ParameterBag;

trait ParametersData
{
    /**
     * @return boolean
     */
    public function getTestMode()
    {
        return $this->getParameter('testMode');
    }
    /**
     * @param  boolean $value
     * @return $this
     */
    public function setTestMode($value)
    {
        return $this->setParameter('testMode', $value);
    }
    /**
     * Get the card token.
     *
     * @return string
     */
    public function getToken()
    {
        return $this->getParameter('token');
    }
    /**
     * Sets the card token.
     *
     * @param string $value
     * @return string
     */
    public function setToken($value)
    {
        return $this->setParameter('token', $value);
    }
    /**
     * Get the payment currency code.
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->getParameter('currency');
    }
    /**
     * Sets the payment currency code.
     *
     * @param string $value
     * @return $this
     */
    public function setCurrency($value)
    {
        if ($value !== null) {
            $value = strtoupper($value);
        }
        return $this->setParameter('currency', $value);
    }
    /**
     * Get the request description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->getParameter('description');
    }
    /**
     * Sets the request description.
     *
     * @param string $value
     * @return string
     */
    public function setDescription($value)
    {
        return $this->setParameter('description', $value);
    }
    /**
     * @return string
     */
    public function getWeight()
    {
        return $this->getParameter('weight');
    }
    /**
     * @param  $value
     * @return $this
     */
    public function setWeight($value)
    {
        return $this->setParameter('weight', $value);
    }
    /**
     * @return string
     */
    public function getWeightUnit()
    {
        return $this->getParameter('weight_unit');
    }
    /**
     * @param  $weight_unit
     * @return $this
     */
    public function setWeightUnit($weight_unit)
    {
        return $this->setParameter('weight_unit', $weight_unit);
    }
    /**
     * @return string
     */
    public function getDimensionUnit()
    {
        return $this->getParameter('dimension_unit');
    }
    /**
     * @param  $dimension_unit
     * @return $this
     */
    public function setDimensionUnit($dimension_unit)
    {
        return $this->setParameter('dimension_unit', $dimension_unit);
    }
    /**
     * Get the parcel ID.
     *
     * The parcel ID is the identifier generated by the merchant website.
     *
     * @return mixed
     */
    public function getParcelId()
    {
        return $this->getParameter('parcelId');
    }
    /**
     * Sets the parcel ID.
     *
     * @param mixed $value
     * @return $this
     */
    public function setParcelId($value)
    {
        return $this->setParameter('parcelId', $value);
    }
    /**
     * A list of items in this order
     *
     * @return ItemBag A bag containing items in this order
     */
    public function getItems()
    {
        return $this->getParameter('items') ? : new ItemBag([]);
    }
    /**
     * Set the items in this order
     *
     * @param ItemBag|array $items An array of items in this order
     * @return $this
     */
    public function setItems($items)
    {
        if ($items && !$items instanceof ItemBag) {
            $items = new ItemBag($items);
        }
        return $this->setParameter('items', $items);
    }
    /**
     * @return string
     */
    public function getRegion()
    {
        return $this->getParameter('region');
    }
    /**
     * @param  $region
     * @return $this
     */
    public function setRegion($region)
    {
        return $this->setParameter('region', $region);
    }
    /**
     * @return Carbon
     */
    public function getShipmentDate()
    {
        return $this->getParameter('shipment_date');
    }
    /**
     * @param  $shipment_date
     * @return $this
     */
    public function setShipmentDate(Carbon $shipment_date)
    {
        return $this->setParameter('shipment_date', $shipment_date);
    }
    /**
     * @return boolean
     */
    public function getDutiable()
    {
        return $this->getParameter('dutiable');
    }
    /**
     * @param  $dutiable
     * @return $this
     */
    public function setDutiable($dutiable)
    {
        return $this->setParameter('dutiable', $dutiable);
    }
    /**
     * @param float $value
     * @return $this
     */
    public function setCashOnDeliveryAmount($value) {
        return $this->setParameter('cash_on_delivery_amount', $value);
    }

    /**
     * @return float
     */
    public function getCashOnDeliveryAmount() {
        return $this->getParameter('cash_on_delivery_amount');
    }
    /**
     * @param string $value
     * @return $this
     */
    public function setCashOnDeliveryCurrency($value) {
        return $this->setParameter('cash_on_delivery_currency', $value);
    }

    /**
     * @return string
     */
    public function getCashOnDeliveryCurrency() {
        return $this->getParameter('cash_on_delivery_currency') ? : $this->getCurrency();
    }
    /**
     * Get the client IP address.
     *
     * @return string
     */
    public function getClientIp()
    {
        return $this->getParameter('clientIp');
    }
    /**
     * Sets the client IP address.
     *
     * @param string $value
     * @return string
     */
    public function setClientIp($value)
    {
        return $this->setParameter('clientIp', $value);
    }
    /**
     * @return Address
     */
    public function getReceiverAddress()
    {
        return $this->getParameter('receiver_address');
    }
    /**
     * @param  Address|array $address
     * @return $this
     */
    public function setReceiverAddress($address)
    {
        if(!($address instanceof Address)) {
            $address = new Address($address);
        }
        if ($address->isEmpty()) {
            $this->invalidArguments('20001');
        }
        return $this->setParameter('receiver_address', $address);
    }
    /**
     * @return Address
     */
    public function getSenderAddress()
    {
        return $this->getParameter('sender_address');
    }
    /**
     * @param  Address|array $address
     * @return $this
     */
    public function setSenderAddress($address)
    {
        if(!($address instanceof Address)) {
            $address = new Address($address);
        }
        if ($address->isEmpty()) {
            $this->invalidArguments('20002');
        }
        return $this->setParameter('sender_address', $address);
    }

    /**
     * @return null|string
     */
    public function getSenderTimeZone() {
        return $this->getSenderAddress() ? $this->getSenderAddress()->getTimeZone() : null;
    }

    /**
     * @return null|string
     */
    public function getReceiverTimeZone() {
        return $this->getReceiverAddress() ? $this->getReceiverAddress()->getTimeZone() : null;
    }

    /**
     * @param float $value
     * @return $this
     */
    public function setInsuranceAmount($value) {
        return $this->setParameter('insurance_amount', $value);
    }

    /**
     * @return float
     */
    public function getInsuranceAmount() {
        return $this->getParameter('insurance_amount');
    }
    /**
     * @param string $value
     * @return $this
     */
    public function setInsuranceCurrency($value) {
        return $this->setParameter('insurance_currency', $value);
    }

    /**
     * @return string
     */
    public function getInsuranceCurrency() {
        return $this->getParameter('insurance_currency') ? : $this->getCurrency();
    }

    /**
     * @param float $value
     * @return $this
     */
    public function setDeclaredAmount($value) {
        return $this->setParameter('declared_amount', $value);
    }

    /**
     * @return float
     */
    public function getDeclaredAmount() {
        return $this->getParameter('declared_amount');
    }
    /**
     * @param string $value
     * @return $this
     */
    public function setDeclaredCurrency($value) {
        return $this->setParameter('declared_currency', $value);
    }

    /**
     * @return string
     */
    public function getDeclaredCurrency() {
        return $this->getParameter('declared_currency') ? : $this->getCurrency();
    }
    /**
     * Get the request TransactionId.
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->getParameter('transaction_id');
    }
    /**
     * Sets the request TransactionId.
     *
     * @param string $value
     * @return $this
     */
    public function setTransactionId($value)
    {
        return $this->setParameter('transaction_id', $value);
    }
    /**
     * Get the request BolId.
     *
     * @return string
     */
    public function getBolId()
    {
        return $this->getParameter('bol_id');
    }
    /**
     * Sets the request BolId.
     *
     * @param string $value
     * @return $this
     */
    public function setBolId($value)
    {
        return $this->setParameter('bol_id', $value);
    }
    /**
     * Get the request date.
     *
     * @return null|Carbon
     */
    public function getDate()
    {
        return $this->getParameter('date');
    }
    /**
     * Sets the request date.
     *
     * @param Carbon $value
     * @return $this
     */
    public function setDate($value)
    {
        return $this->setParameter('date', $value);
    }
    /**
     * Get the request CancelComment.
     *
     * @return string
     */
    public function getCancelComment()
    {
        return $this->getParameter('cancel_comment');
    }
    /**
     * Sets the request CancelComment.
     *
     * @param string $value
     * @return $this
     */
    public function setCancelComment($value)
    {
        return $this->setParameter('cancel_comment', $value);
    }
    /**
     * Get the request address type.
     *
     * @return Address
     */
    public function getAddress()
    {
        return $this->getParameter('address');
    }
    /**
     * Sets the request address.
     *
     * @param Address $value
     * @return $this
     */
    public function setAddress($value)
    {
        return $this->setParameter('address', $value);
    }
    /**
     * Get the request service id.
     *
     * @return string
     */
    public function getServiceId()
    {
        return $this->getParameter('service_id');
    }
    /**
     * Sets the request Service ID.
     *
     * @param string $value
     * @return $this
     */
    public function setServiceId($value)
    {
        return $this->setParameter('service_id', $value);
    }
    /**
     * Get the taking date.
     *
     * @return null|Carbon
     */
    public function getTakingDate()
    {
        return $this->getParameter('taking_date');
    }
    /**
     * Sets the taking date.
     *
     * @param Carbon $value
     * @return $this
     */
    public function setTakingDate(Carbon $value)
    {
        return $this->setParameter('taking_date', $value);
    }
    /**
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->getParameter('language_code') ? : 'en';
    }
    /**
     * @param string $value
     * @return $this
     */
    public function setLanguageCode($value)
    {
        return $this->setParameter('language_code', $value);
    }
    /**
     * @return string
     */
    public function getPayer()
    {
        if(!$this->getParameter('payer')) {
            $this->setParameter('payer', ShippingService::PAYER_SENDER);
        }
        return $this->getParameter('payer');
    }
    /**
     * @param  $payer
     * @return $this
     */
    public function setPayer($payer)
    {
        return $this->setParameter('payer', $payer);
    }
    /**
     * @param $key
     * @return mixed|ParameterBag
     */
    public function getOtherParameters($key = null)
    {
        if(is_null($this->getParameter('other_parameters'))) {
            $this->setParameter('other_parameters', new ParameterBag());
        }
        /** @var $other ParameterBag */
        $other = $this->getParameter('other_parameters');
        return $key ? $other->get($key) : $other;
    }
    /**
     * @param  $key
     * @param  $value
     * @return $this
     */
    public function setOtherParameters($key, $value = null)
    {
        if(is_array($key) || $key instanceof ParameterBag) {
            foreach($key as $k => $v) {
                $this->getOtherParameters()->set($k, $v);
            }
        } else {
            $this->getOtherParameters()->set($key, $value);
        }
        return $this;
    }
    /**
     * @return string
     */
    public function getLogo()
    {
        return $this->getParameter('logo');
    }
    /**
     * @param  $logo
     * @return $this
     */
    public function setLogo($logo)
    {
        return $this->setParameter('logo', $logo);
    }

}